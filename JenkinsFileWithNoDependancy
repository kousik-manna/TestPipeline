import groovy.util.XmlParser
import groovy.xml.MarkupBuilder
import static groovy.io.FileType.FILES
import javax.xml.transform.TransformerException;
import org.xml.sax.SAXException;
import com.cloudbees.hudson.plugins.folder.Folder
import java.nio.file.Files
import java.nio.file.Paths
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
//import hudson.FilePath;
import jenkins.model.Jenkins;

//////User Input before start the build/////////////////////////////////////////////
def ProjectInfo = []
ProjectInfo.add([ProjectName:'RiskApplicationPortal', BrowserName:'Mozilla'])
ProjectInfo.add([ProjectName:'CASL', BrowserName:'IE'])
//workspace path should be same in all nodes//
def workSpacePath = "C:\\Jenkins\\Libraries"
////////////////////////////////////////////////////////////////////////////////////

def StashList = []

def workSpacePathMaster = null
node('master'){
    workSpacePathMaster = "${env.WORKSPACE}"
}
println "Master WorkspacePath ${workSpacePathMaster}"
def parallelTasks = [:]
//////We can trigger all the parallel jobs without knowing the number of available nodes
//////in a particular label expression. 
for(i = 0; i < ProjectInfo.size(); i += 1) {
    def taskName = "task_${i}"
    def ProjName = ProjectInfo.get(i).ProjectName
	def BrwsrName = ProjectInfo.get(i).BrowserName
    parallelTasks["task_${i}"]={
        //stage("task_${i}"){
        stage("${ProjName}_${taskName}"){
            //stage("Executing On Online Node"){
                //if(Jenkins.instance.getNode('Win10Master').toComputer().isOnline()){
                //////Crete Node label ParallelExecution in Jenkins to group similar slave nodes according 
                //////to the test environment required by the build process.
                    node('ParallelExecution'){
                        //////Set custom Workspace for the Node
                        ws("${workSpacePath}") {
                            def envname = "${env.NODE_NAME}:Executor ${EXECUTOR_NUMBER}"
                            println "BuildEnv:: ${envname}"
                            println "Before Wait:: ${taskName}"
                            
                            //////Batch file Execution in nodes
                            stage("Batch Execution"){
                                
                                println "ProjectName is: ${ProjName}"
                                bat 'echo "This is a Batch script" '
	    					    bat returnStatus: true, script: "ant GS_CI  -DFCBP=YY -DOutputFileName=%NODE_NAME%_%BUILD_NUMBER% -Dprojectname=${ProjName} -DBrowserslist=${BrwsrName} -DMaxTimeout_min=6"
                            }
                            
                            					
                                //////Read a properties file to get the values from keys.
                                //////“Pipeline Utility Steps” plugin needs to be installed for this task.
					            stage("Read Properties"){
    						        def props = readProperties file:"\\CICD\\report_path.properties"
	    					        reportFolder =  props['REPORT_FOLDER']
		    				        htmlReport =  props['HTML_REPORT']
			    			        println "REPORT_FOLDER:: ${reportFolder}"
				    		        println "HTML Report:: ${htmlReport}"
					            }
					            
					            //////Copy Files to workspace location from output location.           
                                //////stash result xml with unique name to use in future
                                //Retry is implemented as this step
                                stage("stash Result"){
                                    for(retryCount = 0; retryCount < 3; retryCount += 1) {
                                        def fileexists = fileExists "CICD/${env.NODE_NAME}_${env.BUILD_NUMBER}/${env.NODE_NAME}_${env.BUILD_NUMBER}.xml" 
                                        if(fileexists) {
                                            //stash includes: "CICD/${env.NODE_NAME}_${env.BUILD_NUMBER}/**/*", name: "TestResult_${taskName}"    
                                            stash includes: "CICD/${env.NODE_NAME}_${env.BUILD_NUMBER}/${env.NODE_NAME}_${env.BUILD_NUMBER}.xml", name: "TestResult_${taskName}"
                				            //stash includes: 'FinalReport/AllModulesMainAutomatedTestResultIE02_26_20183_34_05PM.html', name: 'TestResultHTML'    
                				            //stash includes: 'FinalReport/AllModulesMainAutomatedTestResultMozilla02_20_20184_02_24PM.html', name: 'TestResultHTML'
                				            StashList.add("TestResult_${taskName}")
                				            retryCount = 3
                                        }
                                        else{
                                            sleep 20
                                        }
                                    }
                			    }
                            sleep 20
                            println "After Wait:: ${taskName}"
                        }
                    }
                //}
            //}
        }
    }
}

println "${parallelTasks.get(0)}"
println "${parallelTasks.get(1)}"
//////Parallel Execution in multiple nodes
parallel parallelTasks

//////Execute next stage after completion of all parallel Job
/*
stage("AfterParallelJobs"){
    stage("Collecting the XML Report"){
        //////Executing On Online Node
        if(Jenkins.instance.getNode('Win7_Node1').toComputer().isOnline()){
            node('Win7_Node1'){
                ws("${workSpacePath}") {
                    println "Hi All the parallel jobs have completed!!!!"
                    bat returnStatus: true, script: 'if exist "report" rmdir /Q /S report'
					bat returnStatus: true, script: 'mkdir report'
                    for(i = 0; i < StashList.size(); i += 1) {
                        def taskName = "task_${i}"
                        dir('report'){
                            //////Unstash all xml output files in Report directory
                            def stashName = StashList.get(i)
                            //unstash "TestResult_${taskName}"
                            unstash "${stashName}"
                        }                    
                    }
                }
            }
        }
    }
}
*/
//////Execute next stage after completion of all parallel Job

stage("AfterParallelJobs"){
    stage("Collecting the XML Report"){
        //////Executing On Online Node
        //if(Jenkins.instance.getNode('master').toComputer().isOnline()){
            node('master'){
                ws("${workSpacePathMaster}") {
                    println "Hi All the parallel jobs have completed!!!!"
                    bat returnStatus: true, script: "if exist ${workSpacePathMaster}\\report rmdir /Q /S ${workSpacePathMaster}\\report"
					bat returnStatus: true, script: "mkdir ${workSpacePathMaster}\\report"
                    for(i = 0; i < StashList.size(); i += 1) {
                        def taskName = "task_${i}"
                        dir("${workSpacePathMaster}\\report"){
                            //////Unstash all xml output files in Report directory
                            def stashName = StashList.get(i)
                            //unstash "TestResult_${taskName}"
                            unstash "${stashName}"
                        }                    
                    }
                }
            }
        //}
    }
}
/*
stage("Merging XML File"){
    if(Jenkins.instance.getNode('Win7_Node1').toComputer().isOnline()){
        node('Win7_Node1'){
            ws("${workSpacePath}") {
            //////After completion of all concurrent executions, 
            //////output xml of each machine will be merged in a single xml. 
            stage('InvokePowershell_MergeXML') {
                def ReportPath = "${env.WORKSPACE}\\report"
                withEnv(['ReportPath =  "${ReportPath}"']) {
                    println "env path: ${env:ReportPath}"
                    powershell returnStatus: true, script: "${env.WORKSPACE}\\xmlmerge.ps1 ${env:ReportPath}"
                }
            }
            
            }
        }
    }
}
*/

stage("Merging XML File"){
    //if(Jenkins.instance.getNode('master').toComputer().isOnline()){
        node('master'){
            ws("${workSpacePathMaster}") {
            //////After completion of all concurrent executions, 
            //////output xml of each machine will be merged in a single xml. 
                def parser = new XmlParser()
                def writer = new StringWriter()
                def builder = new MarkupBuilder(writer)
    
                def reportXml = []
                new File("${workSpacePathMaster}\\report").eachFileRecurse(FILES) {
                    if(it.name.endsWith('.xml')) {
                        reportXml.add(it)
                        println it
                    }
                }
                
                println "reportXML: ${reportXml.get(0)}"
                
                //String fileContents1 = new File("H:\\For Kousik\\Report\\kousik\\testng-results.xml").text
                //String fileContents2 = new File("H:\\For Kousik\\Report\\Pinaki\\testng-results.xml").text
                //String fileContents3 = new File("H:\\For Kousik\\Report\\Tatha\\testng-results.xml").text
                def xmlpath = []
                for(i = 0; i < reportXml.size(); i += 1) {
                    def filepath = "${reportXml.get(i)}"
                    String fileContents = new File("${filepath}").text
                    xmlpath.add(fileContents)
                }
                //xmlpath.add(fileContents1)
                //xmlpath.add(fileContents2)
                //xmlpath.add(fileContents3)
            
                doc1 = parser.parseText(xmlpath.get(0))
                def doc2 = null
                
                for(i = 1; i < xmlpath.size(); i += 1) {
                    doc2 = parser.parseText(xmlpath.get(i))
                    doc2.test.each { test ->
                        doc1.append(test)
                    }
                }
                
                def passCount = 0
                def failCount = 0
                def skipCount = 0
                def totalCount = 0
                
                doc1.test.each { test ->
                    test.'class'.each{ classNode ->
                        classNode.'test-method'.each{ method ->
                            println "${method.@status}"
                            def status = "${method.@status}"
                            if("${method.@status}" == "PASS"){
                                passCount = passCount + 1
                                println "PASS case"
                            }
                            else if("${method.@status}" == "FAIL"){
                                failCount = failCount + 1 
                                println "FAIL case"
                            }
                            else{
                                skipCount = skipCount + 1
                                println "SKIP case"
                            }
                            
                        }
                    }
                }
                
                totalCount = failCount + passCount + skipCount
                println "totalCount: ${totalCount}"
                println "passCount: ${passCount}"
                println "failCount: ${failCount}"
                println "failCount: ${skipCount}"
                
                doc1.@TotalCount = "${totalCount}"
                doc1.@PassCount = "${passCount}" 
                doc1.@FailCount="${failCount}" 
                doc1.@SkipCount="${skipCount}" 
                
                println doc1
                
                def xmlFile = "${workSpacePathMaster}/report/Final.xml"
                new XmlNodePrinter(new PrintWriter(new FileWriter(xmlFile))).print(doc1)
            
            }
        }
    //}
}

//////Convert XML to HTML using XSLT transform in Groovy to reduce dependency on powershell
stage("XSLTransform"){
    node('master'){
        ws("${workSpacePathMaster}") {
            //def path = "${env.WORKSPACE}\\report" 
            //def NodeFilePath = createFilePath(path)
            def NodeFilePath = "${workSpacePathMaster}\\report" 
            println "Node File Path: ${NodeFilePath}"
            def xslPath = "${workSpacePathMaster}\\Final.xsl"
            println "XSL File Path: ${xslPath}"
            def xmlPath = "${NodeFilePath}\\Final.xml"
            println "XML File Path: ${xmlPath}"
            //def htmlPath = "${NodeFilePath}\\GroovyChart.html"
            //println "HTML File Path: ${htmlPath}"
            
            //File works only in the 'master' so path should be exist in 'master' don't depend where its executing
            //def xslt= new File(xslPath).getText() 
            //readfile takes the path present in the node or master where it's currently executing
            //def xslt = readFile "${xslPath}"
            
////////////////////////////////////////////////////////////////////////////////////////
//////////////////////START OF XSLT CONTENT/////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
            def xslt = '''<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" 

    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 

           xmlns:xs="http://www.w3.org/2001/XMLSchema">
  
  <xsl:template match="/">
  
    <html>
    <div>
    <div>
    <head>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {

        var data = google.visualization.arrayToDataTable([
          ['Task', 'Test Result for suite'],
          ['Total Passed Test Count::<xsl:value-of select="suite/@PassCount" />', <xsl:value-of select="suite/@PassCount" />],
          ['Total Failed Test Count::<xsl:value-of select="suite/@FailCount" />', <xsl:value-of select="suite/@FailCount" />],
          ['Total Skipped Test Count::<xsl:value-of select="suite/@SkipCount" />', <xsl:value-of select="suite/@SkipCount" />]
        ]);

        var options = {
          title: 'Test Result for suite',
          pieHole: 0.4
          //is3D: true
        };

        //var chart = new google.visualization.PieChart(document.getElementById('piechart'));
        //var chart = new google.visualization.PieChart(document.getElementById('piechart_3d'));
        var chart = new google.visualization.PieChart(document.getElementById('donutchart'));

        chart.draw(data, options);
      }
    </script>
  </head>
  </div>
  <div>
    <body title="suite">
      <table border="1" width="1100">
      <tbody>
      <tr>
      <td>
      <div>  
        <br>
        <label for="TotalCount">Total Test Count::</label>
        <xsl:value-of select="suite/@TotalCount" />
        </br>
        <br>
        <label for="PassCount">Total Passed Test Count::</label>
        <xsl:value-of select="suite/@PassCount" />
        </br>
        <br>
        <label for="FailCount">Total Failed Test Count::</label>
        <xsl:value-of select="suite/@FailCount" />
        </br>
        <br>
        <label for="SkipCount">Total Skipped Test Count::</label>
        <xsl:value-of select="suite/@SkipCount" />
        </br>
      </div>  
      </td>
      <td>
        <!--<div id="piechart" style="width: 900px; height: 500px;"></div>-->
        <!--<div id="piechart_3d" style="width: 900px; height: 500px;"></div>-->
      <div id="donutchart" style="width: 900px; height: 500px;"></div>
      </td>
      </tr>
      </tbody>
      </table>
      <div>
        <!--<xsl:for-each select="suite/test">-->
          <p>
          <table border="1" width="1100">
            <thead>
              <tr bgcolor="#9acd32">
                <td>Testmethod Name</td>
                <td>Finished at</td>
                <td>Started at</td>
                <td>status</td>
              </tr>
            </thead>
            <tbody>
             
              <xsl:for-each select="suite/test/class">
                <!--<xsl:value-of select="position()" />-->
                <!--<xsl:variable name="testCount" select="position()" />-->
                <!--testCount:  <xsl:value-of select="$testCount" />-->
                
                <xsl:for-each select="test-method">
                  <!--<xsl:if test="position( )=1">-->
                    <tr>
                      <td>
                        <xsl:for-each select="@name">
                          <xsl:value-of select="." />
                        </xsl:for-each>
                      </td>
                      <td>
                        <xsl:for-each select="@finished-at">
                          <xsl:value-of select="." />
                        </xsl:for-each>
                      </td>
                      <td>
                        <xsl:for-each select="@started-at">
                          <xsl:value-of select="." />
                        </xsl:for-each>
                      </td>
                      <td>
                        <xsl:for-each select="@status">
                          <xsl:value-of select="." />

                        </xsl:for-each>
                      </td>
                    </tr>
                  <!--</xsl:if>-->
                </xsl:for-each>
                
              </xsl:for-each>
              
                
            </tbody>
          </table>
          </p>
        <!--</xsl:for-each>-->
      </div>

      </body>
    </div>
    </div>
    </html>
    
  </xsl:template>
  
</xsl:stylesheet>''' 
///////////////////////////////////////////////////////////////////////////////////////
///////////////END OF XSLT CONTENT/////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

            println "XSL Content: ${xslt}"
            // Load xml 
            //def xml= new File(xmlPath).getText() 
            def xml = readFile "${xmlPath}"
            println "XML Content: ${xml}"
            // Set output file 
            //def html = new FileOutputStream("${workSpacePathMaster}\\Final.html")
            bat returnStatus: true, script: "IF EXIST ${workSpacePathMaster}\\FinalResult.html DEL /F ${workSpacePathMaster}\\FinalResult.html"
            bat returnStatus: true, script: "copy /y NUL ${workSpacePathMaster}\\FinalResult.html >NUL"
            def html = new FileOutputStream("${workSpacePathMaster}\\FinalResult.html")
            //def html = new FileOutputStream(htmlPath) 
            //def html = new hudson.FilePath(channel, manager.build.workspace.toString() + "\\test.properties
    
            // Create transformer 
            def transformer = TransformerFactory.newInstance().newTransformer(new StreamSource(new StringReader(xslt)))         
            
            //Out-Put html will only be created in master.So provided html path should be present in master 
            //Perform transformation 
            transformer.transform(new StreamSource(new StringReader(xml)), new StreamResult(html)) 
            //transformer.transform(new StreamSource(new StringReader(xml)), new StreamResult(htmlPath)) 
        }
    }
//    println env['NODE_NAME']
}

stage("PublishHTML"){
    node('master'){
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "${workSpacePathMaster}", reportFiles: 'Final.html', reportName: 'HTML Report', reportTitles: 'Test Result'])
        //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'H:/WS/26-04-2018', reportFiles: 'H:/WS/26-04-2018/Chart.html', reportName: 'HTML Report', reportTitles: ''])
        //Execute this command in script console as sometimes browser security block the pie chart to show 
        System.setProperty("hudson.model.DirectoryBrowserSupport.CSP", "default-src 'self'; style-src 'self' 'unsafe-inline';")
    }
}

/*
def createFilePath(path) {
    if (env['NODE_NAME'] == null) {
        error "envvar NODE_NAME is not set, probably not inside an node {} or running an older version of Jenkins!";
    } else if (env['NODE_NAME'].equals("master")) {
        return new FilePath(path);
    } else {
        return new FilePath(Jenkins.getInstance().getComputer(env['NODE_NAME']).getChannel(), path);
    }
}
*/
node('master'){
    stage('Send email') {
        def mailRecipients = "Kousik.Manna@cognizant.com"
        def jobName = currentBuild.fullDisplayName
        println "${jobName}"
        //emailext body: '''${SCRIPT, template="groovy-html.template"}''',
        //emailext body: '''${FILE,path="FinalReport/AllModulesMainAutomatedTestResultIE02_26_20183_34_05PM.html"}''',
        //mimeType: 'text/html',
        //subject: "[Jenkins] ${jobName}",
        //to: "${mailRecipients}",
        //replyTo: "${mailRecipients}",
        //recipientProviders: [[$class: 'CulpritsRecipientProvider']]
    }
}
//Execute this command in script console as sometimes browser security block the pie chart to show 
//System.setProperty("hudson.model.DirectoryBrowserSupport.CSP", "default-src 'self'; style-src 'self' 'unsafe-inline';")